// Возможность быстрой реализации коллекций.
// AbstractCollectionName - класс абстрактной коллекции, по типу Set, List и т.д
// который реализует методы, которые есть во всех коллекциях типа CollectionName
// AbstractSet реализует множество методов, которые есть у всех set-ов.
// Например, метод toArray() есть по умолчанию у всех set-ов

// AbstractCollection - класс, который реализует множество методов, присущих ВСЕМ коллекциям
// Например, метод toArray() реализован именно в нем.

// КОРОЧЕ, ОБЩИЕ МЕТОДЫ КОЛЛЕКЦИЙ С РЕАЛИЗАЦИЕЙ ОБЫЧНО ЛЕЖАТ В AbstractCollection

// // Объявить переменную Genereic-типа T мы можем, а создать нет.

Comparable - интерфейс, который обязывает реализовывать метод compareTo.
Comparator - интерфейс, который обязывает реализовать метод compare.


Comparator.naturalOrder() - возвращает КОМПАРАТОР, который сравнивает элементы в натуральном порядке
, а натуральный порядок задается методом compareTo(), а значит тип T должен быть Comparable<? super T>


naturalOrder() хочет Comparable.
Comparator имеет метод compare, но compare компаратора принимает элементы типа T,
которые могут быть не Comparable. На то и нужен компаратор. Кастомное сравнение.

В моем случае тип T произвольный, но порядок должен быть натуральным. Хочется naturalOrder,
но Java ругается, так как тип T мб не Comparable. Скастим (Comparator<T>)(Comparator.naturalOrder())
Теперь наш компаратор принимает произвольные элементы типа T. А значит compare вызовется корректно от двух
элементов типа T.
