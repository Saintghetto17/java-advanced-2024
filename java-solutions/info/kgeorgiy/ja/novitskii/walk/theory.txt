1.byte в Java по умолчанию signed. Чтоб сделать unsigned byte -> умножим b & 0xff
или b & 255. Тогда, мы знаем что положительные значения байт [0, 127] совпадают с беззнаковым,
то есть при умножении любого байта b со значением из промежутка, получим то же b по значению (просто
при выполнении арифметических операций происходит каст из байт в int-ы).
b & 11111111 = b (11111111 ~ 255), b при этом имеет вид 0XXXXXXX
(0 так как последняя цифра отвечает за знак +). Если b отрицательное,
то 1XXXXXXX & 11111111 и получим
значение из [128; 255] уже в виде int-ов из-за каста. Вот так происходит
интерпретация с unsigned значениями
- это просто инты. Положительное, так как произошел каст в int.
Для байт - это все еще отрицательное.


2. %08x - для того, чтобы писать unsigned integers в 16 системе счисления.

3. //        String[] paths = new String[2];
   //        paths[0] = "C:\\Users\\ilyan\\Java-advanced\\java-advanced\\java-solutions\\info\\kgeorgiy\\ja\\Novitskii\\walk\\in";
   //        paths[1] = "C:\\Users\\ilyan\\Java-advanced\\java-advanced\\java-solutions\\info\\kgeorgiy\\ja\\Novitskii\\walk\\out";
   //        args = paths;


4. // В С++ char - это 1 байт. В Алгоритме Дженкинса мы считываем по uint8_t на C++, но у нас Java, поэтому
   // char - 2 байта. Значит нам нужно считывать байты из файла через byte[]. ХЭШ - сумма файла считается по байтам,
   // нам никто не говорил интерпретировать данные в байтах, как char-ы, у нас рандомные байты.
   // const uint8_t* key - массив uint8_t, то есть unsigned БАЙТОВ,


Создание RecursiveWalk-a
RecursiveWalkTreeVisitor visitor = new RecursiveWalkTreeVisitor(writer);
Path startingDir = Paths.get(currentFileSystemElement);
Files.walkFileTree(startingDir, visitor);